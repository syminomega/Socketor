@using System.Text
@using Blazored.LocalStorage
@using Microsoft.Extensions.Localization
@using Socketor.Components.Widgets
@using Socketor.DataModel.Configs
@using Microsoft.AspNetCore.Components.Sections
@using Socketor.DataModel
@using Size = BootstrapBlazor.Components.Size
@inject IStringLocalizer<TcpServerComp> Localizer
@inject ILocalStorageService LocalStorage
@inject ILogger<TcpServerComp> Logger
@inject ToastService ToastService
@inject Tauri Tauri
@implements IAsyncDisposable

<div class="tcp-server-main">
    <div class="tcp-server-left">
        <Split IsVertical="true" Basis="65%" FirstPaneMinimumSize="200px" SecondPaneMinimumSize="80px">
            <FirstPaneTemplate>
                <div class="tcp-server-left-top">
                    <BootstrapInputGroup>
                        <BootstrapInputGroupLabel
                            DisplayText="@Localizer["ServerAddress"]"/>
                        <Display TValue="string" Value="ServerAddressDisplay"/>
                    </BootstrapInputGroup>
                    <BootstrapInputGroup>
                        <BootstrapInputGroupLabel
                            DisplayText="@Localizer["Host"]"/>
                        <BootstrapInput TValue="string" @bind-Value="Config.Host" Disabled="_isServerRunning"/>
                        <BootstrapInputGroupLabel
                            DisplayText="@Localizer["Port"]"/>
                        <BootstrapInput TValue="int" @bind-Value="Config.Port" Disabled="_isServerRunning"/>
                        <Button Text="@ServerButtonText()" Color="ServerButtonColor()"
                                OnClick="@ToggleServerStateClick" IsAsync="true"></Button>
                    </BootstrapInputGroup>
                    <MessageBox @ref="_messageBox" ConfigSectionName="@TcpServerMsgBoxConfigSectionName"
                                MessageBoxConfig="Config.MessageBoxConfig"/>
                </div>
            </FirstPaneTemplate>
            <SecondPaneTemplate>
                <div class="tcp-server-left-bottom">
                    <SendBox ConfigSectionName="@TcpServerSendBoxConfigSectionName"
                             SendBoxConfig="Config.SendBoxConfig" Enabled="_isServerRunning"
                             OnMessageSend="OnMessageSend"/>
                </div>
            </SecondPaneTemplate>
        </Split>
    </div>

    <div style="grid-column: 2; position: relative; width: calc(100% + 4px);">
        <Scroll style="position: absolute; width: 100%;">
            <div class="tcp-server-right-container">
                <Card HeaderText="@Localizer["ServerSettings"]" IsCollapsible="true">
                    <HeaderTemplate>
                        <Button Icon="fa-solid fa-rotate" Size="Size.ExtraSmall" Color="Color.Link"
                                OnClick="@RefreshServerStatus"></Button>
                    </HeaderTemplate>
                    <BodyTemplate>
                        <div class="config-list">
                            <div>@Localizer["ServerStatus"]</div>
                            <BootstrapInputGroup>
                                <Display TValue="string" Value="_serverStatus"></Display>
                            </BootstrapInputGroup>

                            <div>@Localizer["ConnectedClients"]</div>
                            <BootstrapInputGroup>
                                <Display TValue="string" Value="_clientCount.ToString()"></Display>
                            </BootstrapInputGroup>

                            <div>@Localizer["ServerId"]</div>
                            <Display TValue="string" Value="_windowUniqueLabel"></Display>

                            <div>@Localizer["MessageType"]</div>
                            <BootstrapInputGroup>
                                <Select TValue="string" @bind-Value="_messageType"
                                        Items="@_messageTypeOptions"></Select>
                            </BootstrapInputGroup>
                        </div>
                    </BodyTemplate>
                </Card>
                <SectionOutlet SectionName="@TcpServerMsgBoxConfigSectionName"/>
                <SectionOutlet SectionName="@TcpServerSendBoxConfigSectionName"/>
            </div>
        </Scroll>
    </div>
</div>

@code {
    private const string TcpServerMsgBoxConfigSectionName = "TcpServerMsgBoxConfig";
    private const string TcpServerSendBoxConfigSectionName = "TcpServerSendBoxConfig";

    private TcpServerConfig Config { get; set; } = new();

    private string _serverStatus = "Stopped";
    private bool _isServerRunning;
    private string _windowUniqueLabel = "";
    private int _clientCount;
    private MessageBox? _messageBox;
    private string _messageType = "text";

    private readonly List<SelectedItem> _messageTypeOptions =
    [
        new("text", "Text"),
        new("hex", "Hex")
    ];

    private UnlistenFn? _unlistenServerMessage;
    private ITauriWindow? _tauriWindow;

    private string ServerAddressDisplay => $"tcp://{Config.Host}:{Config.Port}";

    private string ServerButtonText() =>
        _isServerRunning ? Localizer["Stop"] : Localizer["Start"];

    private BBColor ServerButtonColor() =>
        _isServerRunning ? BBColor.Danger : BBColor.Success;

    private bool _isTauri;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            _isTauri = await Tauri.Core.IsTauri();
            // load saved configuration
            var storedConfig = await LocalStorage.GetItemAsync<TcpServerConfig?>("TcpServerConfig");
            if (storedConfig != null)
            {
                Config = storedConfig;
            }

            if (_isTauri)
            {
                _tauriWindow = await Tauri.Window.GetCurrentWindow();
                _windowUniqueLabel = await _tauriWindow.Label;
                await _tauriWindow.SetTitle("TCP Server");
                _unlistenServerMessage = await _tauriWindow.Listen<TcpServerEvent>("tcp-server-event", OnServerEventReceived);
                // stop the server when the window is closed
                await _tauriWindow.Once(TauriEventName.WindowCloseRequested, async () =>
                {
                    await DisposeAsync();
                    await _tauriWindow.Destroy();
                });
                // refresh server status on first load
                await RefreshServerStatus();
            }
            else
            {
                Logger.LogWarning("Tauri is not available, TCP server events will not be received.");
            }

            StateHasChanged();
        }
    }

    private async Task RefreshServerStatus()
    {
        if (!_isTauri)
        {
            _serverStatus = "Disabled";
            _isServerRunning = false;
            _clientCount = 0;
            return;
        }

        if (string.IsNullOrWhiteSpace(_windowUniqueLabel))
        {
            await ToastService.Error("Server ID is not set.");
            return;
        }

        try
        {
            var serverInfo = await Tauri.Core.Invoke<TcpServerInfoResponse>("get_tcp_server_info", new { serverId = _windowUniqueLabel });
            _serverStatus = serverInfo.IsRunning ? "Running" : "Stopped";
            _clientCount = serverInfo.ClientCount;
            _isServerRunning = serverInfo.IsRunning;
            if (_tauriWindow != null)
            {
                if (_isServerRunning)
                {
                    await _tauriWindow.SetTitle("TCP Server - Running");
                }
                else
                {
                    await _tauriWindow.SetTitle("TCP Server");
                }
            }
        }
        catch (Exception e)
        {
            _serverStatus = "Stopped";
            _isServerRunning = false;
            _clientCount = 0;

            if (_tauriWindow != null)
            {
                await _tauriWindow.SetTitle("TCP Server");
            }

            await SaveConfig();
            Logger.LogError("Get TCP server status error: {Message}", e.Message);
        }

        StateHasChanged();
    }

    private async Task ToggleServerStateClick()
    {
        if (!_isTauri)
        {
            await ToastService.Warning(Localizer["TauriNotAvailable"]);
            return;
        }

        await SaveConfig();

        if (_isServerRunning)
        {
            await StopServer();
        }
        else
        {
            await StartServer();
        }

        await RefreshServerStatus();
    }

    private async Task StartServer()
    {
        if (string.IsNullOrWhiteSpace(_windowUniqueLabel))
        {
            await ToastService.Error("Server ID is not set.");
            return;
        }

        try
        {
            var startParams = new
            {
                Config.Host,
                Config.Port,
                ServerId = _windowUniqueLabel
            };

            await Tauri.Core.Invoke<string>("start_tcp_server", new { startParams });

            await SaveConfig();

            var startMessage = new MessageData(MessageOwner.Info, Encoding.UTF8.GetBytes($"{Localizer["ServerStarted"]} - ID: {_windowUniqueLabel}"));
            _messageBox?.AddMessage(startMessage);

            await ToastService.Success(Localizer["ServerStarted"], $"Server ID: {_windowUniqueLabel}");
        }
        catch (Exception e)
        {
            Logger.LogError("Start TCP server error: {Message}", e.Message);
            await ToastService.Error(Localizer["StartServerFailed"], e.Message);
        }
    }

    private async Task StopServer()
    {
        if (!_isServerRunning)
        {
            await ToastService.Warning(Localizer["ServerNotRunning"]);
            return;
        }

        try
        {
            await Tauri.Core.Invoke("stop_tcp_server", new { serverId = _windowUniqueLabel });

            var stopMessage = new MessageData(MessageOwner.Info, Encoding.UTF8.GetBytes(Localizer["ServerStopped"]));
            _messageBox?.AddMessage(stopMessage);

            await ToastService.Success(Localizer["ServerStopped"]);
        }
        catch (Exception e)
        {
            Logger.LogError("Stop TCP server error: {Message}", e.Message);
            await ToastService.Error(Localizer["StopServerFailed"], e.Message);
        }
    }

    private async Task OnMessageSend(MessageData messageData)
    {
        if (!_isServerRunning || string.IsNullOrEmpty(_windowUniqueLabel))
        {
            await ToastService.Warning(Localizer["ServerNotRunning"]);
            return;
        }

        try
        {
            var sendParams = new SendTcpMessageRequest
            {
                ServerId = _windowUniqueLabel,
                Message = Encoding.UTF8.GetString(messageData.RawMessage),
                // Default null for broadcast, or specify a client ID to send to a specific client
                TargetClientId = null,
                MessageType = _messageType
            };

            var result = await Tauri.Core.Invoke<string>("send_tcp_message", new { sendParams });

            _messageBox?.AddMessage(messageData);

            // 显示发送结果
            var resultMessage = new MessageData(MessageOwner.Info, Encoding.UTF8.GetBytes(result));
            _messageBox?.AddMessage(resultMessage);
        }
        catch (Exception e)
        {
            var errorMessage = $"{Localizer["SendFailed"]}: {e.Message}";
            _messageBox?.AddMessage(new MessageData(MessageOwner.Error, Encoding.UTF8.GetBytes(errorMessage)));
            await ToastService.Error(Localizer["SendFailed"], e.Message);
        }
    }

    private async Task SaveConfig()
    {
        await LocalStorage.SetItemAsync("TcpServerConfig", Config);
    }

    public async ValueTask DisposeAsync()
    {
        if (_unlistenServerMessage != null)
        {
            await _unlistenServerMessage.Invoke();
            _unlistenServerMessage = null;
        }

        if (_isTauri)
        {
            await RefreshServerStatus();
            if (_isServerRunning)
            {
                await StopServer();
            }
        }

        await SaveConfig();
    }

    // Tauri请求和响应的数据类
    private class SendTcpMessageRequest
    {
        public string ServerId { get; set; } = "";
        public string Message { get; set; } = "";
        public string? TargetClientId { get; set; }
        public string? MessageType { get; set; } = "text";
    }

    private class TcpServerInfoResponse
    {
        public string ServerId { get; set; } = "";
        public string Host { get; set; } = "";
        public int Port { get; set; }
        public int ClientCount { get; set; }
        public bool IsRunning { get; set; }
    }

    // TCP服务器事件数据
    private class TcpServerEvent
    {
        public string ServerId { get; set; } = "";
        public string EventType { get; set; } = "";
        public string ClientId { get; set; } = "";
        public string Message { get; set; } = "";
        public string Timestamp { get; set; } = "";
    }

    private async Task OnServerEventReceived(TcpServerEvent serverEvent)
    {
        // 只处理当前服务器的事件
        // TODO: 后端根据label发送消息到指定窗口
        if (serverEvent.ServerId != _windowUniqueLabel)
        {
            return;
        }

        // 根据事件类型处理不同的事件
        var messageOwner = serverEvent.EventType switch
        {
            "client_connected" => MessageOwner.Info,
            "client_disconnected" => MessageOwner.Info,
            "message_received" => MessageOwner.Receive,
            _ => MessageOwner.Info
        };

        var displayMessage = serverEvent.EventType switch
        {
            "client_connected" => $"[{serverEvent.ClientId}] {serverEvent.Message}",
            "client_disconnected" => $"[{serverEvent.ClientId}] {serverEvent.Message}",
            "message_received" => $"[{serverEvent.ClientId}] {serverEvent.Message}",
            _ => serverEvent.Message
        };

        var messageData = new MessageData(messageOwner, Encoding.UTF8.GetBytes(displayMessage));
        _messageBox?.AddMessage(messageData);

        // 如果是客户端连接/断开事件，刷新客户端计数
        if (serverEvent.EventType is "client_connected" or "client_disconnected")
        {
            await RefreshServerStatus();
        }

        StateHasChanged();
    }

}
